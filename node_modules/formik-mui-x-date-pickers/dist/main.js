'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var DatePicker$1 = require('@mui/x-date-pickers/DatePicker');
var TextField = require('@mui/material/TextField');
var formik = require('formik');
var React = require('react');
var DateTimePicker$1 = require('@mui/x-date-pickers/DateTimePicker');
var DesktopDatePicker$1 = require('@mui/x-date-pickers/DesktopDatePicker');
var DesktopDateTimePicker$1 = require('@mui/x-date-pickers/DesktopDateTimePicker');
var DesktopTimePicker$1 = require('@mui/x-date-pickers/DesktopTimePicker');
var MobileDatePicker$1 = require('@mui/x-date-pickers/MobileDatePicker');
var MobileDateTimePicker$1 = require('@mui/x-date-pickers/MobileDateTimePicker');
var MobileTimePicker$1 = require('@mui/x-date-pickers/MobileTimePicker');
var StaticDatePicker$1 = require('@mui/x-date-pickers/StaticDatePicker');
var StaticDateTimePicker$1 = require('@mui/x-date-pickers/StaticDateTimePicker');
var StaticTimePicker$1 = require('@mui/x-date-pickers/StaticTimePicker');
var TimePicker$1 = require('@mui/x-date-pickers/TimePicker');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var TextField__default = /*#__PURE__*/_interopDefaultLegacy(TextField);
var React__namespace = /*#__PURE__*/_interopNamespace(React);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function createErrorHandler(fieldError, fieldName, setFieldError) {
    return function (error) {
        if (error !== fieldError && error !== '') {
            setFieldError(fieldName, error ? String(error) : undefined);
        }
    };
}

function fieldToDatePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function DatePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(DatePicker$1.DatePicker, __assign({}, fieldToDatePicker(props)), children));
}
DatePicker.displayName = 'FormikMUIDatePicker';

function fieldToDateTimePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function DateTimePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(DateTimePicker$1.DateTimePicker, __assign({}, fieldToDateTimePicker(props)), children));
}
DateTimePicker.displayName = 'FormikMUIDateTimePicker';

function fieldToDesktopDatePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function DesktopDatePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(DesktopDatePicker$1.DesktopDatePicker, __assign({}, fieldToDesktopDatePicker(props)), children));
}
DesktopDatePicker.displayName = 'FormikMUIDesktopDatePicker';

function fieldToDesktopDateTimePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function DesktopDateTimePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(DesktopDateTimePicker$1.DesktopDateTimePicker, __assign({}, fieldToDesktopDateTimePicker(props)), children));
}
DesktopDateTimePicker.displayName = 'FormikMUIDesktopDateTimePicker';

function fieldToDesktopTimePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function DesktopTimePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(DesktopTimePicker$1.DesktopTimePicker, __assign({}, fieldToDesktopTimePicker(props)), children));
}
DesktopTimePicker.displayName = 'FormikMUIDesktopTimePicker';

function fieldToMobileDatePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function MobileDatePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(MobileDatePicker$1.MobileDatePicker, __assign({}, fieldToMobileDatePicker(props)), children));
}
MobileDatePicker.displayName = 'FormikMUIMobileDatePicker';

function fieldToMobileDateTimePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function MobileDateTimePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(MobileDateTimePicker$1.MobileDateTimePicker, __assign({}, fieldToMobileDateTimePicker(props)), children));
}
MobileDateTimePicker.displayName = 'FormikMUIMobileDateTimePicker';

function fieldToMobileTimePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function MobileTimePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(MobileTimePicker$1.MobileTimePicker, __assign({}, fieldToMobileTimePicker(props)), children));
}
MobileTimePicker.displayName = 'FormikMUIMobileTimePicker';

function fieldToStaticDatePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function StaticDatePicker(props) {
    return React__namespace.createElement(StaticDatePicker$1.StaticDatePicker, __assign({}, fieldToStaticDatePicker(props)));
}
StaticDatePicker.displayName = 'FormikMUIStaticDatePicker';

function fieldToStaticDateTimePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function StaticDateTimePicker(props) {
    return React__namespace.createElement(StaticDateTimePicker$1.StaticDateTimePicker, __assign({}, fieldToStaticDateTimePicker(props)));
}
StaticDateTimePicker.displayName = 'FormikMUIStaticDateTimePicker';

function fieldToStaticTimePicker(_a) {
    var _b = _a.field; _b.onChange; var field = __rest(_b, ["onChange"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function StaticTimePicker(props) {
    return React__namespace.createElement(StaticTimePicker$1.StaticTimePicker, __assign({}, fieldToStaticTimePicker(props)));
}
StaticTimePicker.displayName = 'FormikMUIStaticTimePicker';

function fieldToTimePicker(_a) {
    var _b = _a.field; _b.onChange; _b.onBlur; var field = __rest(_b, ["onChange", "onBlur"]), _c = _a.form, isSubmitting = _c.isSubmitting, touched = _c.touched, errors = _c.errors, setFieldValue = _c.setFieldValue, setFieldError = _c.setFieldError, setFieldTouched = _c.setFieldTouched, _d = _a.textField, _e = _d === void 0 ? {} : _d, helperText = _e.helperText, onBlur = _e.onBlur, textField = __rest(_e, ["helperText", "onBlur"]), disabled = _a.disabled, label = _a.label, onChange = _a.onChange, onError = _a.onError, renderInput = _a.renderInput, props = __rest(_a, ["field", "form", "textField", "disabled", "label", "onChange", "onError", "renderInput"]);
    var fieldError = formik.getIn(errors, field.name);
    var showError = formik.getIn(touched, field.name) && !!fieldError;
    return __assign(__assign({ renderInput: renderInput !== null && renderInput !== void 0 ? renderInput : (function (params) { return (React__namespace.createElement(TextField__default["default"], __assign({}, params, { error: showError, helperText: showError ? fieldError : helperText, label: label, onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function () {
                setFieldTouched(field.name, true, true);
            } }, textField))); }), disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting, onChange: onChange !== null && onChange !== void 0 ? onChange : function (date) {
            setFieldTouched(field.name, true, false);
            setFieldValue(field.name, date, true);
        }, onError: onError !== null && onError !== void 0 ? onError : createErrorHandler(fieldError, field.name, setFieldError) }, field), props);
}
function TimePicker(_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    return (React__namespace.createElement(TimePicker$1.TimePicker, __assign({}, fieldToTimePicker(props)), children));
}
TimePicker.displayName = 'FormikMUITimePicker';

exports.DatePicker = DatePicker;
exports.DateTimePicker = DateTimePicker;
exports.DesktopDatePicker = DesktopDatePicker;
exports.DesktopDateTimePicker = DesktopDateTimePicker;
exports.DesktopTimePicker = DesktopTimePicker;
exports.MobileDatePicker = MobileDatePicker;
exports.MobileDateTimePicker = MobileDateTimePicker;
exports.MobileTimePicker = MobileTimePicker;
exports.StaticDatePicker = StaticDatePicker;
exports.StaticDateTimePicker = StaticDateTimePicker;
exports.StaticTimePicker = StaticTimePicker;
exports.TimePicker = TimePicker;
exports.fieldToDatePicker = fieldToDatePicker;
exports.fieldToDateTimePicker = fieldToDateTimePicker;
exports.fieldToDesktopDatePicker = fieldToDesktopDatePicker;
exports.fieldToDesktopDateTimePicker = fieldToDesktopDateTimePicker;
exports.fieldToDesktopTimePicker = fieldToDesktopTimePicker;
exports.fieldToMobileDatePicker = fieldToMobileDatePicker;
exports.fieldToMobileDateTimePicker = fieldToMobileDateTimePicker;
exports.fieldToMobileTimePicker = fieldToMobileTimePicker;
exports.fieldToStaticDatePicker = fieldToStaticDatePicker;
exports.fieldToStaticDateTimePicker = fieldToStaticDateTimePicker;
exports.fieldToStaticTimePicker = fieldToStaticTimePicker;
exports.fieldToTimePicker = fieldToTimePicker;
//# sourceMappingURL=main.js.map
